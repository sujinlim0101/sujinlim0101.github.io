{"componentChunkName":"component---src-templates-blog-template-js","path":"/react/jsx/","result":{"data":{"cur":{"id":"cf37d024-1fef-538d-b9b2-f8c79bd4acab","html":"<h2 id=\"이전-불편했던-코드-스타일\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EB%B6%88%ED%8E%B8%ED%96%88%EB%8D%98-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"이전 불편했던 코드 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 불편했던 코드 스타일</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">funcion App() {\n  return React.createElement('div', {}, 'hello world!')\n}</code></pre></div>\n<p>createElement로 엘레멘트를 만들어줬는데 불편했다.\nHTML처럼 만들어진게 JSX이다.</p>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<ul>\n<li>class 대신 className을 사용해야한다.</li>\n<li>onclick → onClick</li>\n<li>HTML은 마크업 언어이고, JSX는 자바스크립트 코드이다. 바벨이 자바스크립트와 HTML으로 변환한다.</li>\n<li>안에 변수나 함수, 비즈니스 로직을 쓰고싶다면 괄호를 작성해서 쓰면된다.</li>\n<li>형제 노드를 쓸수없다.</li>\n<li>한가지 태그로 꼭 감싸줘야한다. 그래서 React.Fragment를 사용하곤 한다. 아님 &#x3C;>&#x3C;/></li>\n<li>안에 자바스크립트 코드가 가능하다.</li>\n</ul>","excerpt":"이전 불편했던 코드 스타일 createElement로 엘레멘트를 만들어줬는데 불편했다.\nHTML처럼 만들어진게 JSX이다. 차이점 class 대신 className을 사용해야한다. onclick → onClick HTML은 마크업 언어이고, JSX는 자바스크립트 코드이다. 바벨이 자바스크립트와 HTML으로 변환한다. 안에 변수나 함수, 비즈니스 로직을 쓰고싶다면 괄호를 작성해서 쓰면된다. 형제 노드를 쓸수없다. 한가지 태그로 꼭 감싸줘야한다. 그래서 React.Fragment를 사용하곤 한다. 아님 <></> 안에 자바스크립트 코드가 가능하다.","frontmatter":{"date":"October 19, 2021","title":"JSX와 HTML 차이점","categories":"react","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/react/jsx/"}},"next":{"id":"07e8674a-18f7-5170-bc95-5c5e93bc065b","html":"<p>대부분의 우리는 npm 패키지 매니저를 이용하므로 부트스트랩을 설치하면, node_modules 아래 bootstrap의 구조는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">프로젝트/\n├── scss\n│   └── custom.scss\n└── node_modules/\n    └── bootstrap\n        ├── js\n        └── scss</code></pre></div>\n<p>npm 패키지 매니저를 이용하면, node_modules 아래 파일들을 수정하면 이 파일들은 언제든지 install 과정에서 덮어써질수 있습니다.\n그렇기 때문에 부트스트랩을 직접 수정하지 않기보단 다른 방법을 사용하는 것이 바람직합니다. 따라서 이 글에서는 bootstrap을 일부만 포함하는 방법과 Sass variable을 오버라이드하여 사용하는 방법에 대해 소개하려고 합니다.</p>\n<h2 id=\"1-bootstrap을-일부만-포함하기\" style=\"position:relative;\"><a href=\"#1-bootstrap%EC%9D%84-%EC%9D%BC%EB%B6%80%EB%A7%8C-%ED%8F%AC%ED%95%A8%ED%95%98%EA%B8%B0\" aria-label=\"1 bootstrap을 일부만 포함하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Bootstrap을 일부만 포함하기</h2>\n<p>부트스트랩 전체를 포함하지 않고 일부만 포함하는 방법을 알아봅시다.</p>\n<h3 id=\"전체-포함하는-경우\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"전체 포함하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 포함하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Option A: 모든 부트스트랩 파일 포함하기</span>\n\n<span class=\"token comment\">// Include any default variable overrides here (though functions won't be available)</span>\n\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/bootstrap\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Then add additional custom code here</span></code></pre></div>\n<h3 id=\"일부-포함\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B6%80-%ED%8F%AC%ED%95%A8\" aria-label=\"일부 포함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일부 포함</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Option B: 일부 부트스트립 파일 포함하기</span>\n\n<span class=\"token comment\">// 1. funcions를 먼저 import (colors, SVGs, calc, etc 에 대한 함수)</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/functions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. custom variable를 여기서 포함하기</span>\n\n<span class=\"token comment\">// 3. 나머지 스타일 시트 포함</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/variables\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/mixins\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/root\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4. 우리 프로젝트에 필요한 옵셔널한 css 포함</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/utilities\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/reboot\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/type\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/images\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/containers\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/grid\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/helpers\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 5. 옵셔널한 utilities API 포함</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/utilities/api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 6. 다른 css 파일 포함</span></code></pre></div>\n<p>위처럼 개별로 import 해주면 일부만 포함할수 있습니다.</p>\n<h2 id=\"2-variable-활용하기\" style=\"position:relative;\"><a href=\"#2-variable-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 variable 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Variable 활용하기</h2>\n<h3 id=\"variable-defaults\" style=\"position:relative;\"><a href=\"#variable-defaults\" aria-label=\"variable defaults permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable defaults</h3>\n<p>부트스트랩의 모든 Sass 변수는 !default 플래그가 포함되어 있어 부트스트랩 코드를 수정하지 않고도 Sass에서 변수의 기본값을 재정의할수 있습니다. 즉 부트스트랩에선 변수가 이미 할당된 경우 부트스트랩의 default 값이 할당되지 않습니다.</p>\n<p>만약 우리가 bootstrap variables 중 heading line-height가 마음에 들지 않는다면 $headings-line-height를 미리 정의해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/functions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// $headings-line-height 정의하기</span>\n$headings<span class=\"token operator\">-</span>line<span class=\"token operator\">-</span>height<span class=\"token operator\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bootstrap $headings-line-height default값이 적용안됨</span>\n@<span class=\"token keyword\">import</span> <span class=\"token string\">\"../node_modules/bootstrap/scss/variables\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>참고 문서</p>\n<p>부트스트랩 5 Sass( <a href=\"https://getbootstrap.com/docs/5.0/customize/sass/\">링크</a> )</p>\n<p>Sass 변수와 !default 플래그 ( <a href=\"https://designmeme.github.io/ko/blog/sass-variables-and-default-flag/\">링크</a> )</p>","frontmatter":{"date":"October 19, 2021","title":"Bootstrap에서 Sass 활용하기","categories":"css","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/css/bootstrap-sass/"}},"prev":{"id":"25de2742-d759-5100-a190-c3b52c5339ce","html":"<h1 id=\"1-디자인패턴-소개\" style=\"position:relative;\"><a href=\"#1-%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-%EC%86%8C%EA%B0%9C\" aria-label=\"1 디자인패턴 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 디자인패턴 소개</h1>\n<p>디자인패턴의 세계에 오신것을 환영합니다.</p>\n<p>누군가 이미 여러분의 문제를 해결해놓았습니다. 그 문제를 해결했던 다른 개발자들이 익혔던 지혜와 교훈을 왜 활용해야했는지, 그리고 어떻게 활용할 수 있는지에 대해 배우게될것입니다.</p>\n<h3 id=\"문제는-간단한-simuduck-애플리케이션을-시작했습니다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%8A%94-%EA%B0%84%EB%8B%A8%ED%95%9C-simuduck-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"문제는 간단한 simuduck 애플리케이션을 시작했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제는 간단한 simUDuck 애플리케이션을 시작했습니다.</h3>\n<p>오리애플리케이션을 클래스와 객체지향기법을 활용해서 시작했습니다. 근데, 경쟁회사가 생겼습니다..!</p>\n<h3 id=\"이제는-오리들이-날수-있도록-해야합니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C%EB%8A%94-%EC%98%A4%EB%A6%AC%EB%93%A4%EC%9D%B4-%EB%82%A0%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"이제는 오리들이 날수 있도록 해야합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제는 오리들이 날수 있도록 해야합니다.</h3>\n<p>오리를 날아다니게 해야한다고 임원진들이 말합니다. 객체지향도 하는데, 문제없다고 조는 말합니다.</p>\n<h3 id=\"심각한-문제-등장\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EA%B0%81%ED%95%9C-%EB%AC%B8%EC%A0%9C-%EB%93%B1%EC%9E%A5\" aria-label=\"심각한 문제 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심각한 문제 등장</h3>\n<p>오리 인형까지 날아다니는 문제가 있었습니다.</p>\n<p>Duck이란 슈퍼크래스에 fly를 만들어주고, 서브클래스들 모두에게 이 fly기능이 생긴거죠.</p>\n<h3 id=\"조는-상속에-대해-생각합니다\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EB%8A%94-%EC%83%81%EC%86%8D%EC%97%90-%EB%8C%80%ED%95%B4-%EC%83%9D%EA%B0%81%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"조는 상속에 대해 생각합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조는 상속에 대해 생각합니다.</h3>\n<p>fly에 아무것도 하지 않도록 오버라이드 했으면 됐잖아..?</p>\n<h3 id=\"인터페이스는-어떨까요\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EC%96%B4%EB%96%A8%EA%B9%8C%EC%9A%94\" aria-label=\"인터페이스는 어떨까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스는 어떨까요?</h3>\n<p>상속으로 해결하지 않고 인터페이스로 해결할수도 있지 않을까요? Flyable이라는 인터페이스를 만들면 좋을것입니다.</p>\n<h3 id=\"조의-입장에서\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%9D%98-%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C\" aria-label=\"조의 입장에서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조의 입장에서?</h3>\n<p>모든 서브클래스에서 날지 않기 때문에 상속을 사용하는 것이 올바를 해결책은 아닐것입니다.</p>\n<h3 id=\"문제를-파악해보자\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%8C%8C%EC%95%85%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"문제를 파악해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제를 파악해보자.</h3>\n<p>Flyable을 사용하는 방법은 처음에는 괜찮아보였지만, 자바 인터페이스에서는 구현된 코드가 전혀 들어가지 않기 때무에 코드 재사용을 할수 없단 단점이 있습니다. 즉 한 행동을 바꿀 때마다 일일히 서브클래스들을 수정해줘야합니다.</p>\n<p>모든 패턴은 “시스템의 일부분을 다른 부분과 독립적으로 변화시킬수 있는 방법을 제공하기” 위한 것입니다. 그럼 Duck 클래스에서 오리의 행동을 뽑아내볼까요?</p>\n<h3 id=\"바뀌는-부분과-그렇지-않은-부분-분리하기\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%80%8C%EB%8A%94-%EB%B6%80%EB%B6%84%EA%B3%BC-%EA%B7%B8%EB%A0%87%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%B6%80%EB%B6%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"바뀌는 부분과 그렇지 않은 부분 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바뀌는 부분과 그렇지 않은 부분 분리하기</h3>\n<p>변화하는 부분과 그렇지 않은 부분을 분리하려면 두개의 클래스 집합을 만들어야합니다. 하나는 “나는것”과 관련된 것과 “꽥꽥거리는 것”과 관련된 부분이죠. 그리고 저런것을 안하는 Duck 클래스를 하나 만들어야합니다.</p>\n<h3 id=\"오리의-행동-디자인\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC%EC%9D%98-%ED%96%89%EB%8F%99-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"오리의 행동 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리의 행동 디자인</h3>\n<p>나는 행동과 꽥꽥거리는 행동을 구현하는 클래스는 어떻게 디자인해야할까?</p>\n<p>디자인 원칙 : 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.</p>\n<p>각 행동은 인터페이스로 표현하고, 행동을 구현할 때는 이런 인터페이스를 구현하겠습니다. 나는 행동과 꽥꽥거리는 행동은 이제 Duck클래스에 구현하거나 서브클래스 자체에서 별도로 구현하는 방법하고는 상반된 방법입니다.</p>\n<p>이 방법은 지금까지의 Duck 클래스 구현에 의존하거나 서브클래스 자체에서 별도로 구현하는 방법과 완전 딴 이야기입ㄴ다. 전에는 특정 구현에 의존했습니다. 특정 구현에 의지했기 때문에 행동을 변경할 여지가 없었죠.</p>\n<p>새로운 디자인원칙을 적용하면, 인터페이스로 표현하는 행동을 사용합니다.</p>\n<h3 id=\"인터페이스에-맞춰서-프로그래밍-한다는-것\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%A7%9E%EC%B6%B0%EC%84%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83\" aria-label=\"인터페이스에 맞춰서 프로그래밍 한다는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스에 맞춰서 프로그래밍 한다는 것</h3>\n<p>인터페이스에 맞춰서 프로그래밍 한다는 것는 사실 상위 형식에 맞춰서 프로그래밍 한다는 뜻입니다. 여기서 인터페이스는 자바의 인터페이스 구조를 꼭 지칭하는 것은 아니고, 의미로 존재하는 것일수 있습니다.</p>\n<h3 id=\"duck의-행동을-구현하는-방법\" style=\"position:relative;\"><a href=\"#duck%EC%9D%98-%ED%96%89%EB%8F%99%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"duck의 행동을 구현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck의 행동을 구현하는 방법</h3>\n<p>여기에서는 FlyBehavior와 QuackBehavior라는 두 인터페이스를 사용합니다. 그리고 구체적인 행동을 구현하는 클래스들이 있습니다.</p>\n<p>FlyBehavior</p>\n<ul>\n<li>FlyWithWings</li>\n<li>FlyNoWings</li>\n</ul>\n<p>QuackBehavior</p>\n<ul>\n<li>Quack</li>\n<li>Squack</li>\n<li>MuteQuack</li>\n</ul>\n<hr>\n<h3 id=\"duck의-행동-통합하기\" style=\"position:relative;\"><a href=\"#duck%EC%9D%98-%ED%96%89%EB%8F%99-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"duck의 행동 통합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck의 행동 통합하기</h3>\n<p>가장 중요한 점은 이제 Duck에서 나는 행동과 꽥꽥 소리를 내는 행동을 Duck 클래스에서 정의한 메소드를 써서 구현하지 않고 다른 클래스에 위임한다는 것입니다.</p>\n<p><strong>어떻게 하는걸까요?</strong></p>\n<ol>\n<li>\n<p>우선 Duck 클래스에 FlyBehavior, QuackBehavior라는 두개의 인터페이스 형식의 인스턴스 변수를 추가합니다. 각 오리객체는 이 변수에 특정 행동 형식에 대한 레퍼런스를 다형적으로 설정합니다.</p>\n<p>그리고, 나는 행동과 꽥꽥거리는 행동은 각 인터페이스로 옮겨놨기 때문에 Duck의 fly()와 quack() 메소드를 제거합니다. 그 대신, Duck 클래스에 performFly()와 performDuck()이라는 메소드를 집어넣습니다.</p>\n</li>\n<li>\n<p>performDuck() 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>\n\tQuackBehavior quackBehavior<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">performQuack</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tquackBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>꽤 간단하죠? 꽥꽥 거리는 행동을 하고 싶을 땐 quackBehavior에 의해 참조된 객체에서 소리내면 됩니다.</p>\n</li>\n<li>\n<p>이제 flyBehavior와 quackBehavior 인스턴스 변수를 설정하는 방법에 대해 생각해볼 차례입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MallarDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// MallarDuck은 quackBehavior와 flyBehavior 인스턴스 변수를 상속받음</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">MallarDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tquackBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflyBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlyWithWings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">'저는 물오리입니다'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> 이 물오리 클래스는 오리 꽥꽥 소리를 낼수 있는것입니다.</p>\n<p>잠깐잠깐, 특정 구현에 맞춰서 프로그래밍 하면 안된다 하지 않았다는 지적을 할수 있을 텐데요. 하지만 여기선 행동을 구상클래스로 설정하고 있긴하지만, 실행시 쉽게 바꿀수 있습니다. 따라서 이 코드는 상당히 유연하다고 할수 있죠.</p>\n</li>\n</ol>\n<hr>\n<p>참고 문서</p>\n<p>[JAVA] 자바 인터페이스란?(Interface)_이 글 하나로 박살내자 ( <a href=\"https://limkydev.tistory.com/197\">링크</a> )</p>\n<p>[JAVA] 자바 추상클래스란? ( <a href=\"https://limkydev.tistory.com/188\">링크</a> )</p>","frontmatter":{"date":"October 25, 2021","title":"디자인패턴 - 디자인패턴","categories":"book","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/design-pattern/design-pattern/"}},"site":{"siteMetadata":{"siteUrl":"https://sujinlim0101.github.io","comments":{"utterances":{"repo":"sujinlim0101/sujinlim0101.github.io"}}}}},"pageContext":{"slug":"/react/jsx/","nextSlug":"/css/bootstrap-sass/","prevSlug":"/design-pattern/design-pattern/"}},"staticQueryHashes":["1073350324","2938748437"]}