{"componentChunkName":"component---src-templates-blog-template-js","path":"/input/","result":{"data":{"cur":{"id":"e211e323-02b5-54bf-b41f-e61c606cb436","html":"<h2 id=\"type을-써야하는-이유\" style=\"position:relative;\"><a href=\"#type%EC%9D%84-%EC%8D%A8%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"type을 써야하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type을 써야하는 이유</h2>\n<p>input을 만들때 type을 고려하는 것이 중요합니다. 하지만, 종종 우리는 type=“text”로만 input을 만들고, 그 이외의 type들에 대해서는 생각하지 않는 경향이 있습니다.</p>\n<p>하지만 text, 그리고 email, password 말고도 다양한 타입들이 있습니다.</p>\n<p>우리가 타입을 특정해서 사용할 때 좋은 점은 더 좋은 autocompletion을 사용할수 있다는 점입니다. 또, 스크린리더에게 더 좋은 해석을 할수 있게 하며, 결과적으로 유저에게 정보를 잘 이해시킬수 있습니다.</p>\n<p>예를 들어, tel이라는 타입을 쓰는 경우 유저에게 유용합니다. 모바일 환경의 유저에게 [+*#] 버튼이 달린 numeric keyboard를 이용하게 할수 있는 듯이 말이죠.</p>\n<h2 id=\"input-type-종류\" style=\"position:relative;\"><a href=\"#input-type-%EC%A2%85%EB%A5%98\" aria-label=\"input type 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input type 종류</h2>\n<ul>\n<li>button</li>\n<li>checkbox</li>\n<li>email</li>\n<li>file</li>\n<li>hidden</li>\n<li>image</li>\n<li>month</li>\n<li>number</li>\n<li>password</li>\n<li>radio</li>\n<li>range</li>\n<li>reset</li>\n<li>search</li>\n<li>submit</li>\n<li>tel</li>\n<li>text</li>\n<li>time</li>\n<li>url</li>\n<li>week</li>\n<li>color</li>\n<li>date</li>\n<li>datetime-local</li>\n</ul>\n<p>이렇듯 input 엘레멘트의 종류에는 여러가지 있습니다. 그러므로, input을 쓰기전에 타입을 고려해서 작성해 보시는 건 어떨까요?</p>\n<h2 id=\"placeholder에만-의존하지-말기\" style=\"position:relative;\"><a href=\"#placeholder%EC%97%90%EB%A7%8C-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-label=\"placeholder에만 의존하지 말기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>placeholder에만 의존하지 말기</h2>\n<p>input에 예전에 유행하던 것중에 하나가 placeholder로 input이 어떤것인지 표현하는 것입니다. 이것은 아직도 가끔 보이기도 하는데 참 안좋은 패턴입니다.</p>\n<p>placeholder는 예시와 같은 intended한 값을 표현할 때 써야하는데, 라벨을 대신해버리는 것입니다. 유저가 필드를 입력할때 이 값은 지워지므로, 사용자는 이것이 무엇에 관한 것이였는지 기억해야만합니다. 또, 어떤 유저는 이 값이 이미 채워진 값이라고도 생각할수 있습니다.</p>\n<h3 id=\"firefox-개발자-도구-이용하기\" style=\"position:relative;\"><a href=\"#firefox-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"firefox 개발자 도구 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Firefox 개발자 도구 이용하기</h3>\n<p>Firefox의 접근성 탭을 이용하면, 더 쉽게 웹에 어떻게 접근성이 적용되어있는지 보기 쉽습니다. Firefox의 개발자 도구를 활용해보는 것도 좋을거라고 생각합니다.</p>","excerpt":"type을 써야하는 이유 input을 만들때 type을 고려하는 것이 중요합니다. 하지만, 종종 우리는 type=“text”로만 input을 만들고, 그 이외의 type들에 대해서는 생각하지 않는 경향이 있습니다. 하지만 text, 그리고 email, password 말고도 다양한 타입들이 있습니다. 우리가 타입을 특정해서 사용할 때 좋은 점은 더 좋은 autocompletion을 사용할수 있다는 점입니다. 또, 스크린리더에게 더 좋은 해석을 할수 있게 하며, 결과적으로 유저에게 정보를 잘 이해시킬수 있습니다. 예를 들어, tel이라는 타입을 쓰는 경우 유저에게 유용합니다. 모바일 환경의 유저에게 +*# 버튼이 달린 …","frontmatter":{"date":"October 16, 2021","title":"input에서 a11y 고려하기","categories":"a11y","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/input/"}},"next":{"id":"5ba59386-97e6-5b10-b30a-ea74a0698285","html":"<p>폼 유효성 검사를 일일히 작성하기에는 복잡하기 때문에 라이브러리를 이용하는 편입니다. 기존 프로젝트에서는 angularjs를 이용했기 때문에, angularjs의 validation을 이용하였습니다. 하지만 vue애선 달리 제공하는 validation이 없기 때문에, 인기가 있는 vee-validate 라이브러리에 관심을 갖게 되었습니다.</p>\n<p><strong>Vee-validate는</strong> <strong>Yup</strong>과의 조합도 좋습니다. 리액트에서도 <strong>Formik + Yup</strong> 조합으로 많이 씁니다. 우리는 Vue니까 Formik가 아닌 Vee-validate를 사용해봅시다.</p>\n<h2 id=\"vee-validate--yup\" style=\"position:relative;\"><a href=\"#vee-validate--yup\" aria-label=\"vee validate  yup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>V<strong>ee-validate +</strong> <strong>Yup</strong></h2>\n<p>게다가 이 두개의 조합을 vee-validate 공식 사이트에서 추천하는 것으로 보여, 이 둘을 조합해서 사용하겠습니다. Vee validate 홈페이지에서 <a href=\"https://vee-validate.logaretm.com/v4/tutorials/best-practices\">Best Practices</a>를 Yup을 사용해서 보여주고 있네요.</p>\n<p>공식사이트에선 Yup 라이브러리에서 string, object를 가져와서 유효성을 체크하고 있습니다.\nVee-validate 단독으로도 유효성 검사를 수행할수 있으나, length가 얼마나 되는지, strig인지 아닌지 등에 대한 유효성 체크 로직을 작성해주어야 하는데 반해, yup을 이용하면 간편하게 작성할수 있습니다.</p>\n<p>예를들어 이메일 유효성 체크를 한다고 합시다. 그러면 Vee-validate에서 다음과 같이 작성해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> validations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">email</span><span class=\"token operator\">:</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'This field is required'</span>\n\n        <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(([^&lt;>()[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$</span><span class=\"token regex-delimiter\">/</span></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">'Please enter a valid email address'</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 Yup을 이용하면 간단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> validationSchema <span class=\"token operator\">=</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">...</span>\n      email<span class=\"token operator\">:</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>대부분 우리가 사용하는 유효성에 대한 함수를 yup에서 제공하고 있습니다. 따라서, 두 라이브러리 조합이 꽤 좋은 선택으로 보이기 때문에 두 조합을 추천합니다. 다음에는 vee-validation에 대해 더 자세히 소개해보도록하겠습니다.</p>","frontmatter":{"date":"September 26, 2021","title":"Vee-validation + Yup 조합 사용하기","categories":"vue3","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/vue3/vee-validate-yup/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://sujinlim0101.github.io","comments":{"utterances":{"repo":"sujinlim0101/sujinlim0101.github.io"}}}}},"pageContext":{"slug":"/input/","nextSlug":"/vue3/vee-validate-yup/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}