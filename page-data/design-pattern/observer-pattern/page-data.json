{"componentChunkName":"component---src-templates-blog-template-js","path":"/design-pattern/observer-pattern/","result":{"data":{"cur":{"id":"2e491af8-5533-5330-ad09-a6ffe986ca84","html":"<h1 id=\"옵저버-패턴\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4\" aria-label=\"옵저버 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 패턴</h1>\n<p>객체들에게 연락망을 돌립시다.</p>\n<h3 id=\"기상-모니터링-애플리케이션-개요\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%83%81-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B0%9C%EC%9A%94\" aria-label=\"기상 모니터링 애플리케이션 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기상 모니터링 애플리케이션 개요</h3>\n<p>시스템은 기상 스테이션과 WeatherData 객체, 그리고 사용자에게 현재 기상 조건을 보여주는 디스플레이 이렇게 세요소로 이루어집니다.</p>\n<h3 id=\"weatherdate-클래스\" style=\"position:relative;\"><a href=\"#weatherdate-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"weatherdate 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WeatherDate 클래스</h3>\n<p>getTemperature, getHumidity, measurementsChanged가 있습니다.</p>\n<h3 id=\"지금-알고-있는-것들\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EA%B8%88-%EC%95%8C%EA%B3%A0-%EC%9E%88%EB%8A%94-%EA%B2%83%EB%93%A4\" aria-label=\"지금 알고 있는 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지금 알고 있는 것들</h3>\n<p>Weather-O-Rama에서 준 규격은 그리 분명하지가 않습니다. 하지만 우엇을 할지는 확실하게 알고 넘어가야합니다. 지금 우리가 알고 있는 것들을 한번 정리해보죠.</p>\n<ul>\n<li>새로운 기상 데이터가 나올 때마다 measurementsChanged 매소드가 호출됩니다.</li>\n<li>기상데이터를 사용하는 세개의 디스플레이 항목을 구현해야 합니다. 하나는 현재 조건을 표시하는 것이고, 다른 하나는 기상 통계를 표시하는 것이고 나머지 하나는 기상 예볼르 표시하는 것이죠. WeatherData에서 새로운 측정값이 들어올 때마다 디스플레이를 갱신해야합니다.</li>\n<li>시스템이 확장 가능해야합니다.</li>\n</ul>\n<h3 id=\"기상-스테이션용-코드를-대강-다음과-같이-만들어보았습니다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%83%81-%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%85%98%EC%9A%A9-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%8C%80%EA%B0%95-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%B4-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"기상 스테이션용 코드를 대강 다음과 같이 만들어보았습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기상 스테이션용 코드를 대강 다음과 같이 만들어보았습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherData</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measurementsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfloat temp <span class=\"token operator\">=</span> <span class=\"token function\">getTemperature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfloat humidity <span class=\"token operator\">=</span> <span class=\"token function\">getHumidity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">...</span>\n\t\tcurrentConditionDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> humidity<span class=\"token punctuation\">,</span> pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstatisticsDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> humidity<span class=\"token punctuation\">,</span> pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"아까-구현한-코드에-무슨-문제가\" style=\"position:relative;\"><a href=\"#%EC%95%84%EA%B9%8C-%EA%B5%AC%ED%98%84%ED%95%9C-%EC%BD%94%EB%93%9C%EC%97%90-%EB%AC%B4%EC%8A%A8-%EB%AC%B8%EC%A0%9C%EA%B0%80\" aria-label=\"아까 구현한 코드에 무슨 문제가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아까 구현한 코드에 무슨 문제가?</h3>\n<p>배웠던 원칙을 살펴보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">\t\tcurrentConditionDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> humidity<span class=\"token punctuation\">,</span> pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstatisticsDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> humidity<span class=\"token punctuation\">,</span> pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 부분에서 구체적인 구현에 맞춰서 코딩했기 때문에 프로그램을 고치지 않고는 다른 디스플레이 항목을 추가/제거 하지 않고는 다른 디스플레이 항목을 추가/제거 할수 없습니다.</p>\n<h3 id=\"옵저버-패턴을-만나봅시다\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%A7%8C%EB%82%98%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"옵저버 패턴을 만나봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 패턴을 만나봅시다.</h3>\n<p>신문사 이야기를 예시로 들면 구독하고 싶을 때 구독하거나, 구독을 끊고 싶을 때 신청을하죠. 그것과 비슷한게 옶저버 패턴입니다.</p>\n<h3 id=\"출판사--구독자--옵저버-패턴\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%ED%8C%90%EC%82%AC--%EA%B5%AC%EB%8F%85%EC%9E%90--%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4\" aria-label=\"출판사  구독자  옵저버 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출판사 + 구독자 = 옵저버 패턴</h3>\n<p>신문 구독 매커니즘만 제대로 이해할 수 있다면 옵저버 패턴을 쉽게 이해할수 있습니다. 출판사를 주제(subject) 구독자를 옵저버로 불러보죠.</p>\n<h3 id=\"옵저버-패턴의-정의\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"옵저버 패턴의 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 패턴의 정의</h3>\n<p>옵저버 패턴에선 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 자동으로 연락이 가고 자동으로 내용이 갱신되는 방식으로 일때다 의존성을 정의합니다.</p>\n<h3 id=\"느슨한-결합의-위력\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EC%8A%A8%ED%95%9C-%EA%B2%B0%ED%95%A9%EC%9D%98-%EC%9C%84%EB%A0%A5\" aria-label=\"느슨한 결합의 위력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느슨한 결합의 위력</h3>\n<p>두 객체가 느슨하게 결합되어 있다는 것은 그 둘이 상호작용을 하긴 하지만 서로에 대해 서로 잘 모른다는 것을 의미합니다.</p>\n<p>옵저버 패턴에서는 주제와 옵저버가 느슨하게 결합되어 있는 객체 디자인을 제공합니다.</p>\n<ul>\n<li>주제가 옵저버에 대해서 아는 것은 특정 인터페이스를 구현한다는 것 뿐입니다.</li>\n<li>옵저버는 언제든지 새로 추가할수 있습니다.</li>\n<li>새로운 형식의 옵저버를 추가하려고 할 때도 주제를 전혀 변경할 필요가 없습니다.</li>\n<li>주제와 옵저버는 서로 독립ㅂ적으로 재사용할 수 있습니다.</li>\n<li>주제나 옵저버가 바뀌더라도 서로한테 영향을 미치지는 않습니다.</li>\n</ul>\n<h3 id=\"기상-스테이션-설계\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%83%81-%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84\" aria-label=\"기상 스테이션 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기상 스테이션 설계</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">registerObserver</span><span class=\"token punctuation\">(</span>Observer o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>Observer o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">notifyObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 상태가 변경된 후, 옵저버들에게 알리기 위해 호출하는 메서드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>float temp<span class=\"token punctuation\">,</span> float humidity<span class=\"token punctuation\">,</span> float pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 파라미터는 기상 정보 변경시 옵저버들에게 전달되는 상태</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DisplayElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 디스플레이 항목을 화면에 표시해야 하는 경우, 매서드 호출</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"weatherdata에서-subject-인터페이스-구현하기\" style=\"position:relative;\"><a href=\"#weatherdata%EC%97%90%EC%84%9C-subject-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"weatherdata에서 subject 인터페이스 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WeatherData에서 Subject 인터페이스 구현하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/**\n* WeatherData 는 Subject 를 구현. 안에 Observer 리스트를 가지고 있으면서,\n  데이터의 변동이 생기면 observer에게 알린다.\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherData</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> observers;\n    private float temperature;\n    private float humidity;\n    private float pressure;\n    \n    public WeatherData() </span><span class=\"token punctuation\">{</span>\n        observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">();\n    }\n    \n    public void registerObserver(Observer o) </span><span class=\"token punctuation\">{</span>\n        observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    \n    public void removeObserver(Observer o) </span><span class=\"token punctuation\">{</span>\n        observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    \n    public void notifyObservers() </span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 모든 옵저버에게 알리기.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Observer each <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            each<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> humidity<span class=\"token punctuation\">,</span> pressure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    \n    public void measurementsChanged() </span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">notifyObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    \n    public void setMeasurements(float temperature, float humidity, float pressure) </span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">=</span> temperature<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>humidity <span class=\"token operator\">=</span> humidity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pressure <span class=\"token operator\">=</span> pressure<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">measurementsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n}</span></code></pre></div>\n<h3 id=\"디스플레이-항목을-만들어봅시다\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%8A%A4%ED%94%8C%EB%A0%88%EC%9D%B4-%ED%95%AD%EB%AA%A9%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"디스플레이 항목을 만들어봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디스플레이 항목을 만들어봅시다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentConditionsDisplay</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">,</span> DisplayElemnt <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> float temperature<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> float humidity<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Subject weatherData<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 객체는 당장 사용할 일이 없지만 저장해둠. </span>\n    \n    <span class=\"token comment\">// 생성자에 subject 객체를 전달하고, 그 객체를 사용하여 디스플레이를 옵저버로 등록한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CurrentConditionsDisplay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Subject weatherData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weatherData <span class=\"token operator\">=</span> weatherData<span class=\"token punctuation\">;</span>\n        weatherData<span class=\"token punctuation\">.</span><span class=\"token function\">registerObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">float temperature<span class=\"token punctuation\">,</span> float humidity<span class=\"token punctuation\">,</span> float pressure</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">=</span> temperature<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>humidity <span class=\"token operator\">=</span> humidity<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispaly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 최근에 얻은 기온과 습도를 출력한다.</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current conditions : \"</span> <span class=\"token operator\">+</span> temperature <span class=\"token operator\">+</span> <span class=\"token string\">\"F degrees and \"</span> <span class=\"token operator\">+</span> humidity <span class=\"token operator\">+</span> <span class=\"token string\">\"% humidity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"기상스테이션을-돌려봅시다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%83%81%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%8F%8C%EB%A0%A4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"기상스테이션을 돌려봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기상스테이션을 돌려봅시다.</h3>\n<p>테스트용 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherStation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        WeatherData weatherData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">weatherData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// observer 생성</span>\n        \n        CurrentConditionsDisplay currentDisplay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CurrentConditionsDisplay</span><span class=\"token punctuation\">(</span>weatherData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 새로운 기상 측정값이 들어온것처럼 만듭니다.</span>\n        weatherData<span class=\"token punctuation\">.</span><span class=\"token function\">setMeasurements</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30.4</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        weatherData<span class=\"token punctuation\">.</span><span class=\"token function\">setMeasurements</span><span class=\"token punctuation\">(</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.2</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        weatherData<span class=\"token punctuation\">.</span><span class=\"token function\">setMeasurements</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29.2</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"자바-내장-옵저버-패턴\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%82%B4%EC%9E%A5-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4\" aria-label=\"자바 내장 옵저버 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 내장 옵저버 패턴</h3>\n<p>지금까지는 우리가 직접 만든 코드로 옵저버 패턴을 구현해보았습니다. 하지만, 자바에서 몇 가지 API 를 통하여 자체적으로 옵저버 패턴을 지원하기도 합니다.</p>\n<p>가장 일반적으로 java.util 패키지에 들어있는 Observer 인터페이스와 Observable 클래스를 들 수 있습니다. 그리고 이걸 사용하면, 푸시 방식으로도 갱신할 수 있고 풀 방식으로도 갱신이 가능하다. 즉, Observable 클래스는 위의 Subject 와 같은 역할을 하고, Observer 인터페이스는 위의 옵저버 인터페이스와 같은 역할을 한다.</p>\n<p><a href=\"http://astrod.github.io/design_pattern/2016/03/09/Head-First-%EC%98%B5%EC%A0%80%EB%B2%84-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/\">http://astrod.github.io/design_pattern/2016/03/09/Head-First-%EC%98%B5%EC%A0%80%EB%B2%84-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</a> 의 글을 참고하여 작성했습니다.</p>","excerpt":"옵저버 패턴 객체들에게 연락망을 돌립시다. 기상 모니터링 애플리케이션 개요 시스템은 기상 스테이션과 WeatherData 객체, 그리고 사용자에게 현재 기상 조건을 보여주는 디스플레이 이렇게 세요소로 이루어집니다. WeatherDate 클래스 getTemperature, getHumidity, measurementsChanged가 있습니다. 지금 알고 있는 것들 Weather-O-Rama에서 준 규격은 그리 분명하지가 않습니다. 하지만 우엇을 할지는 확실하게 알고 넘어가야합니다. 지금 우리가 알고 있는 것들을 한번 정리해보죠. 새로운 기상 데이터가 나올 때마다 measurementsChanged 매소드가 호출됩니다. …","frontmatter":{"date":"October 25, 2021","title":"옵저버 패턴","categories":"book","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/design-pattern/observer-pattern/"}},"next":{"id":"25de2742-d759-5100-a190-c3b52c5339ce","html":"<h1 id=\"1-디자인패턴-소개\" style=\"position:relative;\"><a href=\"#1-%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-%EC%86%8C%EA%B0%9C\" aria-label=\"1 디자인패턴 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 디자인패턴 소개</h1>\n<p>디자인패턴의 세계에 오신것을 환영합니다.</p>\n<p>누군가 이미 여러분의 문제를 해결해놓았습니다. 그 문제를 해결했던 다른 개발자들이 익혔던 지혜와 교훈을 왜 활용해야했는지, 그리고 어떻게 활용할 수 있는지에 대해 배우게될것입니다.</p>\n<h3 id=\"문제는-간단한-simuduck-애플리케이션을-시작했습니다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%8A%94-%EA%B0%84%EB%8B%A8%ED%95%9C-simuduck-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"문제는 간단한 simuduck 애플리케이션을 시작했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제는 간단한 simUDuck 애플리케이션을 시작했습니다.</h3>\n<p>오리애플리케이션을 클래스와 객체지향기법을 활용해서 시작했습니다. 근데, 경쟁회사가 생겼습니다..!</p>\n<h3 id=\"이제는-오리들이-날수-있도록-해야합니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C%EB%8A%94-%EC%98%A4%EB%A6%AC%EB%93%A4%EC%9D%B4-%EB%82%A0%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"이제는 오리들이 날수 있도록 해야합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제는 오리들이 날수 있도록 해야합니다.</h3>\n<p>오리를 날아다니게 해야한다고 임원진들이 말합니다. 객체지향도 하는데, 문제없다고 조는 말합니다.</p>\n<h3 id=\"심각한-문제-등장\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EA%B0%81%ED%95%9C-%EB%AC%B8%EC%A0%9C-%EB%93%B1%EC%9E%A5\" aria-label=\"심각한 문제 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심각한 문제 등장</h3>\n<p>오리 인형까지 날아다니는 문제가 있었습니다.</p>\n<p>Duck이란 슈퍼크래스에 fly를 만들어주고, 서브클래스들 모두에게 이 fly기능이 생긴거죠.</p>\n<h3 id=\"조는-상속에-대해-생각합니다\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EB%8A%94-%EC%83%81%EC%86%8D%EC%97%90-%EB%8C%80%ED%95%B4-%EC%83%9D%EA%B0%81%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"조는 상속에 대해 생각합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조는 상속에 대해 생각합니다.</h3>\n<p>fly에 아무것도 하지 않도록 오버라이드 했으면 됐잖아..?</p>\n<h3 id=\"인터페이스는-어떨까요\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EC%96%B4%EB%96%A8%EA%B9%8C%EC%9A%94\" aria-label=\"인터페이스는 어떨까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스는 어떨까요?</h3>\n<p>상속으로 해결하지 않고 인터페이스로 해결할수도 있지 않을까요? Flyable이라는 인터페이스를 만들면 좋을것입니다.</p>\n<h3 id=\"조의-입장에서\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%9D%98-%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C\" aria-label=\"조의 입장에서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조의 입장에서?</h3>\n<p>모든 서브클래스에서 날지 않기 때문에 상속을 사용하는 것이 올바를 해결책은 아닐것입니다.</p>\n<h3 id=\"문제를-파악해보자\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%8C%8C%EC%95%85%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"문제를 파악해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제를 파악해보자.</h3>\n<p>Flyable을 사용하는 방법은 처음에는 괜찮아보였지만, 자바 인터페이스에서는 구현된 코드가 전혀 들어가지 않기 때무에 코드 재사용을 할수 없단 단점이 있습니다. 즉 한 행동을 바꿀 때마다 일일히 서브클래스들을 수정해줘야합니다.</p>\n<p>모든 패턴은 “시스템의 일부분을 다른 부분과 독립적으로 변화시킬수 있는 방법을 제공하기” 위한 것입니다. 그럼 Duck 클래스에서 오리의 행동을 뽑아내볼까요?</p>\n<h3 id=\"바뀌는-부분과-그렇지-않은-부분-분리하기\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%80%8C%EB%8A%94-%EB%B6%80%EB%B6%84%EA%B3%BC-%EA%B7%B8%EB%A0%87%EC%A7%80-%EC%95%8A%EC%9D%80-%EB%B6%80%EB%B6%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"바뀌는 부분과 그렇지 않은 부분 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바뀌는 부분과 그렇지 않은 부분 분리하기</h3>\n<p>변화하는 부분과 그렇지 않은 부분을 분리하려면 두개의 클래스 집합을 만들어야합니다. 하나는 “나는것”과 관련된 것과 “꽥꽥거리는 것”과 관련된 부분이죠. 그리고 저런것을 안하는 Duck 클래스를 하나 만들어야합니다.</p>\n<h3 id=\"오리의-행동-디자인\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A6%AC%EC%9D%98-%ED%96%89%EB%8F%99-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"오리의 행동 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오리의 행동 디자인</h3>\n<p>나는 행동과 꽥꽥거리는 행동을 구현하는 클래스는 어떻게 디자인해야할까?</p>\n<p>디자인 원칙 : 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.</p>\n<p>각 행동은 인터페이스로 표현하고, 행동을 구현할 때는 이런 인터페이스를 구현하겠습니다. 나는 행동과 꽥꽥거리는 행동은 이제 Duck클래스에 구현하거나 서브클래스 자체에서 별도로 구현하는 방법하고는 상반된 방법입니다.</p>\n<p>이 방법은 지금까지의 Duck 클래스 구현에 의존하거나 서브클래스 자체에서 별도로 구현하는 방법과 완전 딴 이야기입ㄴ다. 전에는 특정 구현에 의존했습니다. 특정 구현에 의지했기 때문에 행동을 변경할 여지가 없었죠.</p>\n<p>새로운 디자인원칙을 적용하면, 인터페이스로 표현하는 행동을 사용합니다.</p>\n<h3 id=\"인터페이스에-맞춰서-프로그래밍-한다는-것\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%A7%9E%EC%B6%B0%EC%84%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83\" aria-label=\"인터페이스에 맞춰서 프로그래밍 한다는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스에 맞춰서 프로그래밍 한다는 것</h3>\n<p>인터페이스에 맞춰서 프로그래밍 한다는 것는 사실 상위 형식에 맞춰서 프로그래밍 한다는 뜻입니다. 여기서 인터페이스는 자바의 인터페이스 구조를 꼭 지칭하는 것은 아니고, 의미로 존재하는 것일수 있습니다.</p>\n<h3 id=\"duck의-행동을-구현하는-방법\" style=\"position:relative;\"><a href=\"#duck%EC%9D%98-%ED%96%89%EB%8F%99%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"duck의 행동을 구현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck의 행동을 구현하는 방법</h3>\n<p>여기에서는 FlyBehavior와 QuackBehavior라는 두 인터페이스를 사용합니다. 그리고 구체적인 행동을 구현하는 클래스들이 있습니다.</p>\n<p>FlyBehavior</p>\n<ul>\n<li>FlyWithWings</li>\n<li>FlyNoWings</li>\n</ul>\n<p>QuackBehavior</p>\n<ul>\n<li>Quack</li>\n<li>Squack</li>\n<li>MuteQuack</li>\n</ul>\n<hr>\n<h3 id=\"duck의-행동-통합하기\" style=\"position:relative;\"><a href=\"#duck%EC%9D%98-%ED%96%89%EB%8F%99-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"duck의 행동 통합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck의 행동 통합하기</h3>\n<p>가장 중요한 점은 이제 Duck에서 나는 행동과 꽥꽥 소리를 내는 행동을 Duck 클래스에서 정의한 메소드를 써서 구현하지 않고 다른 클래스에 위임한다는 것입니다.</p>\n<p><strong>어떻게 하는걸까요?</strong></p>\n<ol>\n<li>\n<p>우선 Duck 클래스에 FlyBehavior, QuackBehavior라는 두개의 인터페이스 형식의 인스턴스 변수를 추가합니다. 각 오리객체는 이 변수에 특정 행동 형식에 대한 레퍼런스를 다형적으로 설정합니다.</p>\n<p>그리고, 나는 행동과 꽥꽥거리는 행동은 각 인터페이스로 옮겨놨기 때문에 Duck의 fly()와 quack() 메소드를 제거합니다. 그 대신, Duck 클래스에 performFly()와 performDuck()이라는 메소드를 집어넣습니다.</p>\n</li>\n<li>\n<p>performDuck() 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>\n\tQuackBehavior quackBehavior<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">performQuack</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tquackBehavior<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>꽤 간단하죠? 꽥꽥 거리는 행동을 하고 싶을 땐 quackBehavior에 의해 참조된 객체에서 소리내면 됩니다.</p>\n</li>\n<li>\n<p>이제 flyBehavior와 quackBehavior 인스턴스 변수를 설정하는 방법에 대해 생각해볼 차례입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MallarDuck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// MallarDuck은 quackBehavior와 flyBehavior 인스턴스 변수를 상속받음</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">MallarDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tquackBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflyBehavior <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlyWithWings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">'저는 물오리입니다'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> 이 물오리 클래스는 오리 꽥꽥 소리를 낼수 있는것입니다.</p>\n<p>잠깐잠깐, 특정 구현에 맞춰서 프로그래밍 하면 안된다 하지 않았다는 지적을 할수 있을 텐데요. 하지만 여기선 행동을 구상클래스로 설정하고 있긴하지만, 실행시 쉽게 바꿀수 있습니다. 따라서 이 코드는 상당히 유연하다고 할수 있죠.</p>\n</li>\n</ol>\n<hr>\n<p>참고 문서</p>\n<p>[JAVA] 자바 인터페이스란?(Interface)_이 글 하나로 박살내자 ( <a href=\"https://limkydev.tistory.com/197\">링크</a> )</p>\n<p>[JAVA] 자바 추상클래스란? ( <a href=\"https://limkydev.tistory.com/188\">링크</a> )</p>","frontmatter":{"date":"October 25, 2021","title":"디자인패턴","categories":"book","author":"찐코딩","emoji":"✒️"},"fields":{"slug":"/design-pattern/design-pattern/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://sujinlim0101.github.io","comments":{"utterances":{"repo":"sujinlim0101/sujinlim0101.github.io"}}}}},"pageContext":{"slug":"/design-pattern/observer-pattern/","nextSlug":"/design-pattern/design-pattern/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}